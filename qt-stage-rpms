#!/bin/sh
# Bring an rpm into the appropriate repo from the staging area
# 
########################################################################
# Change Log
# 04/11/14 shubes - changed invocation of qt-update-yum-repos
#                 - split out qt-check-sign-rpm script
#                 - split out qt-move-to-repo script
#                 - refactored
# 04/09/14 shubes - remove related binaries when staging srpm
# 12/09/13 shubes - added processing for logs
# 12/01/13 shubes - created
########################################################################

########################################################################
# we've (re)staged a src.rpm, so remove any corresponding build logs
# and binary rpms in both /repos and /stage trees
#
a4_remove_binary_rpms(){

stagstat=${stagfile#$stagdir/}
stagstat=${stagstat%%/*}
stagname=${stagfile##*/}
stagpvr=${stagname%$srcsfx}

for rootdir in $repodir $stagdir; do
  for logfile in $(find $rootdir/$stagstat/ -name "$stagpvr*$logsfx"); do
    b45_remove_each_log
  done
done
}

########################################################################
# Remove each log file and it's corresponding binary rpms

b45_remove_each_log(){

while read wrotestring; do
  b45_remove_binary_rpm
done << !EOF!
$(grep ^Wrote $logfile)
!EOF!

echo "$me - removing $logfile"
find $rootdir/ -samefile $logfile -exec rm {} \;
}

########################################################################
# Remove a binary rpm file, including hard links in /repos
#
b45_remove_binary_rpm(){

rpmfile=${wrotestring#Wrote: }
# there's a \r at the end of this string that we need to get rid of
rpmfile=${rpmfile%.rpm*}
rpmfile=${rpmfile}.rpm
rpmfile=${rpmfile##*/}
logpath=${logfile%/*}
binrpm=$logpath/$rpmfile

if [ -f "$binrpm" ]; then
  echo "$me - removing $binrpm"
  find $rootdir/ -samefile $binrpm -exec rm {} \;
# if it's in the yum repo, we need to recreate the repodata
  if [ -d $logpath/repodata ]; then
    touch $logpath/$flagfile
  fi
else
  echo "$me - $binrpm not found to remove"
fi
}

########################################################################
# process each build logs and its binary rpms

a6_stage_build_files(){

archdir=${staglog%/*}

while read wrotestring; do
  rpmfile=${wrotestring#Wrote: }
# there's a \r at the end of this string that we need to get rid of
  rpmfile=${rpmfile%.rpm*}
  rpmfile=${rpmfile}.rpm
  rpmfile=${rpmfile##*/}
  stagfile=$archdir/$rpmfile
  qt-check-sign-rpm    $stagfile
  qt-move-file-to-repo $stagfile
done << !EOF!
$(grep ^Wrote $staglog)
!EOF!
 
archdir=$(echo $archdir | sed -e "s|$stagdir/|$repodir/|")
touch $archdir/$flagfile

qt-move-file-to-repo $staglog
}

########################################################################
# main process begins here
#
me=${0##*/}
myver=v1.1
echo "$me - $myver started"

stagdir=/stage
repodir=/repos
actdir=$repodir/active
srcsfx=.src.rpm
logsfx=.buildlog.txt
flagfile=.needs-update

for stagfile in $(find $stagdir -name "*$srcsfx" ); do
  qt-check-sign-rpm    $stagfile
  qt-move-file-to-repo $stagfile
  a4_remove_binary_rpms
done

for staglog in $(find $stagdir -name "*$logsfx" ); do
  a6_stage_build_files
done

qt-update-yum-repos

echo "$me - ended"
exit 0
